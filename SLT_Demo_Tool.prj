<deployment-project plugin="plugin.ezdeploy" plugin-version="1.0">
  <configuration build-checksum="601939552" file="C:\Users\z5439673\OneDrive - UNSW\Documents\GitHub\time_freq_analysis\SLT_Demo_Tool.prj" location="C:\Users\z5439673\OneDrive - UNSW\Documents\GitHub\time_freq_analysis" name="SLT_Demo_Tool" preferred-package-location="C:\Users\z5439673\OneDrive - UNSW\Documents\GitHub\time_freq_analysis\SLT_Demo_Tool" preferred-package-type="package.type.exe" target="target.ezdeploy.standalone" target-name="Application Compiler">
    <param.appname>SLT_Demo_Tool</param.appname>
    <param.icon />
    <param.icons />
    <param.version>1.0</param.version>
    <param.authnamewatermark>Ben Jancovich</param.authnamewatermark>
    <param.email>b.jancovich@unsw.edu.au</param.email>
    <param.company>University of New South Wales</param.company>
    <param.summary>This program loads an audio file, computes spectrograms and scalograms using different algorithms &amp; then plots for comparison.</param.summary>
    <param.description>||| README |||
SLT_Demo_Tool V1.0

Ben Jancovich
b.jancovich@unsw.edu.au

Center For Marine Science and Innovation
School of Biological, Earth &amp; Environmental Sciences
University of New South Wales

Summary:
This program loads an audio file, computes spectrograms and scalograms using different algorithms &amp; then plots for comparison

Program Description:
This program compares methods for time-frequency analysis of complex, low frequency animal calls. 
The purpose of this program is to demonstrate the Superlets Transform (Moca et al., 2021) as a method for time frequency anaysis in bioacoustics, 
and to illustrate its advantages over conventional methods such as the short-time Fourier transform.

The program is designed to run as a standalone application, with no software dependancies, and no pre-requisite knowledge of coding or signal processing.
It has a rudimentary user interface that allows the user to do the following pre-processing tasks:

	- Load an audio file
	- Trim the file to the time segment of interest
	- Resample the file to the frequency range of interest

The program then asks the user to configure the parameters for each analysis algorithm. 
The recommended value for each parameter is pre-filled in the UI dialog boxes. The algorithms used are:

	- Short-time Fourier transform - implemented using the built-in MATLAB function "spectrogram.m"
	- Continuous wavelet transform - implemented using the built-in MATLAB function "cwt.m"
	- Fractional Adaptive Superresolution Wavelet Transform - implemented using function "nfaslt.m", developed by Moca et al. (2021), 
	released under MIT licence at https://github.com/TransylvanianInstituteOfNeuroscience/Superlets

A UI dialog asks the user to select a location to save the results. 
Two STFT analyses are performed, with different window lengths. 
Results are plotted in a single window, and UI dialog asks whether to play the audio file over the currently selected windows audio device.
A final UI element then asks if the user would like to re-run the analysis on the same (trimmed and resampled) audio file, 
providing an opportunity to test different analysis algorithm parameters.

____________________________________________________________________________

||| LICENCES |||

SLT_Demo_Tool:

CC-BY 2023 Ben Jancovich

This work is licensed under the Creative Commons Attribution 4.0 International License. 
To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.
Permission is given to copy and redistribute the material in any medium or format, and to adapt remix, transform, and build upon the material for any purpose, even commercially.
Any re-use must give appropriate credit, provide a link to the license, and indicate if changes were made.
Permission is given to do so in any reasonable manner, but not in any way that suggests the licensor endorses the re-use.
Any re-use may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.
No warranties are given. The license may not give you all of the permissions necessary for your intended use. 
For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. 

Fractional Adaptive Superresolution Wavelet Transform (nfaslt.m):

MIT License
Copyright (c) 2020 Harald BÃ¢rzan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</param.description>
    <param.screenshot>C:\Users\z5439673\OneDrive - UNSW\Pictures\SLTDEMOTOOL_Splash_screen.png</param.screenshot>
    <param.guid />
    <param.installpath.string>\University of New South Wales\SLT_Demo_Tool\</param.installpath.string>
    <param.installpath.combo>option.installpath.programfiles</param.installpath.combo>
    <param.logo />
    <param.install.notes />
    <param.target.install.notes />
    <param.intermediate>${PROJECT_ROOT}\SLT_Demo_Tool\for_testing</param.intermediate>
    <param.files.only>${PROJECT_ROOT}\SLT_Demo_Tool\for_redistribution_files_only</param.files.only>
    <param.output>${PROJECT_ROOT}\SLT_Demo_Tool</param.output>
    <param.logdir>${PROJECT_ROOT}\SLT_Demo_Tool</param.logdir>
    <param.enable.clean.build>false</param.enable.clean.build>
    <param.user.defined.mcr.options />
    <param.target.type>subtarget.standalone</param.target.type>
    <param.support.packages />
    <param.web.mcr>true</param.web.mcr>
    <param.package.mcr>false</param.package.mcr>
    <param.no.mcr>false</param.no.mcr>
    <param.web.mcr.name>SLT_Demo_Tool_WebInstaller</param.web.mcr.name>
    <param.package.mcr.name>SLT_Demo_Tool_Installer</param.package.mcr.name>
    <param.no.mcr.name>MyAppInstaller_app</param.no.mcr.name>
    <param.windows.command.prompt>true</param.windows.command.prompt>
    <param.create.log>false</param.create.log>
    <param.log.file />
    <param.native.matlab>false</param.native.matlab>
    <param.checkbox>false</param.checkbox>
    <param.example />
    <param.help.text>Syntax 
	  -? 
	 
 Input Arguments 
	 -?  print help on how to use the application 
	 input arguments</param.help.text>
    <unset>
      <param.icon />
      <param.icons />
      <param.version />
      <param.guid />
      <param.installpath.string />
      <param.installpath.combo />
      <param.logo />
      <param.install.notes />
      <param.target.install.notes />
      <param.intermediate />
      <param.files.only />
      <param.logdir />
      <param.enable.clean.build />
      <param.user.defined.mcr.options />
      <param.target.type />
      <param.support.packages />
      <param.web.mcr />
      <param.package.mcr />
      <param.no.mcr />
      <param.no.mcr.name />
      <param.windows.command.prompt />
      <param.create.log />
      <param.log.file />
      <param.native.matlab />
      <param.checkbox />
      <param.example />
    </unset>
    <fileset.main>
      <file>${PROJECT_ROOT}\loadfile_compare_TFRs_APP.m</file>
    </fileset.main>
    <fileset.resources />
    <fileset.package />
    <fileset.depfun>
      <file>C:\Users\z5439673\OneDrive - UNSW\Documents\GitHub\Superlets\matlab-pure\nfaslt.m</file>
      <file>${PROJECT_ROOT}\TFRunitconvertNorm.m</file>
      <file>C:\Users\z5439673\OneDrive - UNSW\Documents\GitHub\Utilities\easySRC.m</file>
    </fileset.depfun>
    <build-deliverables>
      <file location="${PROJECT_ROOT}\SLT_Demo_Tool\for_testing" name="SLT_Demo_Tool.exe" optional="false">C:\Users\z5439673\OneDrive - UNSW\Documents\GitHub\time_freq_analysis\SLT_Demo_Tool\for_testing\SLT_Demo_Tool.exe</file>
      <file location="${PROJECT_ROOT}\SLT_Demo_Tool\for_testing" name="readme.txt" optional="true">C:\Users\z5439673\OneDrive - UNSW\Documents\GitHub\time_freq_analysis\SLT_Demo_Tool\for_testing\readme.txt</file>
      <file location="${PROJECT_ROOT}\SLT_Demo_Tool\for_testing" name="splash.png" optional="false">C:\Users\z5439673\OneDrive - UNSW\Documents\GitHub\time_freq_analysis\SLT_Demo_Tool\for_testing\splash.png</file>
    </build-deliverables>
    <workflow />
    <matlab>
      <root>C:\Program Files\MATLAB\R2022b</root>
      <toolboxes>
        <toolbox name="neuralnetwork" />
      </toolboxes>
      <toolbox>
        <neuralnetwork>
          <enabled>true</enabled>
        </neuralnetwork>
      </toolbox>
    </matlab>
    <platform>
      <unix>false</unix>
      <mac>false</mac>
      <windows>true</windows>
      <win2k>false</win2k>
      <winxp>false</winxp>
      <vista>false</vista>
      <linux>false</linux>
      <solaris>false</solaris>
      <osver>10.0</osver>
      <os32>false</os32>
      <os64>true</os64>
      <arch>win64</arch>
      <matlab>true</matlab>
    </platform>
  </configuration>
</deployment-project>